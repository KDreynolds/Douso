name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest grpcio grpcio-tools

    # - name: Generate gRPC code
    #   run: |
    #     python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. order_service/order_service.proto
    #     python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. product_service/product_service.proto
    #     python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. user_service/user_service.proto

    - name: Run unit tests
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        pytest tests/test_order_service.py tests/test_product_service.py tests/test_user_service.py
    
    - name: Build Docker images
      run: |
        docker build -t user-service ./user_service
        docker build -t product-service ./product_service
        docker build -t order-service ./order_service
    
    - name: Run Docker Compose
      run: docker-compose up -d
    
    - name: Wait for services to start
      run: sleep 100s
    
    - name: Test running services
      run: |
        curl http://localhost:8081 || true
        curl http://localhost:8082 || true
        curl http://localhost:8083 || true

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v2

    - name: Install Sentry CLI
      run: curl -sL https://sentry.io/get-cli/ | bash

    - name: Create Sentry release
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      run: |
        export PATH=$PATH:/usr/local/bin
        SENTRY_RELEASE=$(sentry-cli releases propose-version)
        echo "SENTRY_RELEASE=$SENTRY_RELEASE" >> $GITHUB_ENV
        sentry-cli --log-level=debug releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
        sentry-cli --log-level=debug releases set-commits --auto --ignore-missing $SENTRY_RELEASE

    - name: Setup Pulumi
      uses: pulumi/setup-pulumi@v2

    - name: Configure Pulumi
      run: |
        pulumi login
        pulumi stack select dev -c
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

    - name: Deploy with Pulumi
      run: |
        cd pulumi
        pulumi up --yes
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

    - name: Finalize Sentry release
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      run: |
        sentry-cli --log-level=debug releases finalize $SENTRY_RELEASE
        sentry-cli --log-level=debug releases deploys $SENTRY_RELEASE new -e production